###############################################################################
# modules/iam_role/main.tf  (updated to support ${account_id} in JSON templates)
###############################################################################

terraform {
  required_providers {
    aws = { source = "hashicorp/aws", version = ">= 5.0" }
  }
}

# ----------------------------- Variables -------------------------------------

variable "role_name" {
  type        = string
  description = "IAM role name."
}

variable "assume_role_policy_json" {
  type        = string
  description = "Path to assume-role policy JSON template (use .tpl if interpolating ${account_id})."
}

variable "policy_json_files" {
  type        = map(string)
  description = "Map of { policy_name = path_to_json_tpl }. Each JSON template becomes a customer-managed policy and is attached."
}

variable "managed_policy_arns" {
  type        = list(string)
  description = "List of AWS managed policy ARNs to attach to the role."
}

variable "path" {
  type        = string
  description = "IAM role path."
}

variable "description" {
  type        = string
  description = "Role description."
}

variable "max_session_duration" {
  type        = number
  description = "Max session duration in seconds (3600â€“43200)."
}

variable "tags" {
  type        = map(string)
  description = "Tags for the role and created customer-managed policies."
}

variable "account_id" {
  type        = string
  description = "AWS Account ID to substitute inside JSON templates."
}

# ------------------------------ Resources ------------------------------------

resource "aws_iam_role" "this" {
  name                 = var.role_name
  path                 = var.path
  description          = var.description
  max_session_duration = var.max_session_duration

  # render assume-role policy (works for plain JSON or .tpl with ${account_id})
  assume_role_policy = templatefile(var.assume_role_policy_json, {
    account_id = var.account_id
  })

  tags = var.tags
}

# Create customer-managed policies from JSON templates
resource "aws_iam_policy" "this" {
  for_each    = var.policy_json_files
  name        = "${var.role_name}-${each.key}"
  description = "Policy ${each.key} for role ${var.role_name}"

  # render template with variables (unused vars are ignored in templates without placeholders)
  policy = templatefile(each.value, {
    account_id = var.account_id
  })

  tags = var.tags
}

# Attach the customer-managed policies to the role
resource "aws_iam_role_policy_attachment" "custom" {
  for_each   = aws_iam_policy.this
  role       = aws_iam_role.this.name
  policy_arn = each.value.arn
}

# Attach AWS-managed policies to the role
resource "aws_iam_role_policy_attachment" "managed" {
  for_each   = toset(var.managed_policy_arns)
  role       = aws_iam_role.this.name
  policy_arn = each.value
}

# ------------------------------- Outputs -------------------------------------

output "role_name" {
  value       = aws_iam_role.this.name
  description = "IAM role name."
}

output "role_arn" {
  value       = aws_iam_role.this.arn
  description = "IAM role ARN."
}

output "attached_custom_policy_arns" {
  value       = [for p in aws_iam_policy.this : p.arn]
  description = "ARNs of customer-managed policies created from JSON templates."
}
