Thought for 25s
# modules/iam_role/variables.tf
variable "role_name" {
  type        = string
  description = "IAM role name."
}

variable "assume_role_policy_json" {
  type        = string
  description = "Path to the assume-role policy JSON file."
}

variable "policy_json_files" {
  type        = map(string)
  description = "Map of { policy_name = path_to_json }. Each JSON becomes a customer-managed policy and is attached to the role."
}

variable "managed_policy_arns" {
  type        = list(string)
  description = "List of AWS managed policy ARNs to attach to the role."
}

variable "path" {
  type        = string
  description = "IAM role path (e.g., '/')."
}

variable "description" {
  type        = string
  description = "Role description."
}

variable "max_session_duration" {
  type        = number
  description = "Max session duration in seconds (3600â€“43200)."
}

variable "tags" {
  type        = map(string)
  description = "Tags to apply to the role and created policies."
}


resource "aws_iam_role" "this" {
  name                 = var.role_name
  path                 = var.path
  description          = var.description
  max_session_duration = var.max_session_duration
  assume_role_policy   = file(var.assume_role_policy_json)
  tags                 = var.tags
}

resource "aws_iam_policy" "custom" {
  for_each    = var.policy_json_files
  name        = "${var.role_name}-${each.key}"
  description = "Policy ${each.key} for role ${var.role_name}"
  policy      = file(each.value)
  tags        = var.tags
}

resource "aws_iam_role_policy_attachment" "attach_custom" {
  for_each   = aws_iam_policy.custom
  role       = aws_iam_role.this.name
  policy_arn = each.value.arn
}

resource "aws_iam_role_policy_attachment" "attach_managed" {
  for_each   = toset(var.managed_policy_arns)
  role       = aws_iam_role.this.name
  policy_arn = each.value
}

output "role_name" { value = aws_iam_role.this.name }
output "role_arn"  { value = aws_iam_role.this.arn  }
output "custom_policy_arns" { value = [for p in aws_iam_policy.custom : p.arn] }

# example usage in root
module "iam_role" {
  source = "./modules/iam_role"

  role_name               = "efm-app-role"
  assume_role_policy_json = "files/assume.json"

  # pass {} or [] yourself if none
  policy_json_files = {
    s3 = "files/policies/s3.json"
    cw = "files/policies/cloudwatch.json"
  }
  managed_policy_arns = [
    "arn:aws:iam::aws:policy/ReadOnlyAccess"
  ]

  path                 = "/"
  description          = "EFM app role"
  max_session_duration = 3600
  tags = {
    Environment = "dev"
    App         = "efm"
  }
}
