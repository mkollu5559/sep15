#############################################
# Azure PostgreSQL Flexible Server
# Intelligent Tuning + Performance Insights
# (drop into your module alongside the server)
#
# Assumes you already create:
# resource "azurerm_postgresql_flexible_server" "db" { ... }
#############################################

# ==================== variables.tf ====================
variable "enable_pg_perf_features" {
  description = "Enable Performance Insights features (pg_stat_statements, query capture). Recommended in lower environments."
  type        = bool
  default     = false
}

variable "enable_intelligent_tuning" {
  description = "Enable Azure Intelligent Tuning (index/autovacuum tuning) via server parameters."
  type        = bool
  default     = false
}

variable "postgresql_extensions" {
  description = <<EOT
List of PostgreSQL extensions to ALLOW-LIST at the SERVER level (portal Intelligent Performance).
Must be supported by Azure PostgreSQL Flexible Server.
Recommended set to light up portal features:
- pg_stat_statements : Performance Insights graphs
- pg_qualstats       : index recommendations
- auto_explain       : exec plan sampling
- hypopg             : hypothetical indexes
- pgcrypto           : common crypto/UUID functions
EOT
  type        = list(string)
  default     = ["pg_stat_statements","pg_qualstats","auto_explain","hypopg","pgcrypto"]
}

variable "intelligent_tuning_targets" {
  description = <<EOT
Targets for intelligent tuning ('intelligent_tuning.metric_targets').
Use one of:
- ["ALL"]  : enable all targets
- ["NONE"] : disable all targets
- subset   : e.g., ["tuning-autovacuum"]
EOT
  type        = list(string)
  default     = ["tuning-autovacuum"]
}

# ---------- Index tuning knobs (see MS docs for ranges) ----------
variable "index_tuning_mode" {
  description = "Index tuning mode: REPORT (recommend only) or ENFORCE (auto create/drop)."
  type        = string
  default     = "REPORT"
}

variable "index_tuning_analysis_interval" {
  description = "Frequency (minutes) for index analysis. Range: 60–10080. Default: 720."
  type        = number
  default     = 720
}

variable "index_tuning_max_columns_per_index" {
  description = "Max columns per recommended index (1–10). Default: 10."
  type        = number
  default     = 10
}

variable "index_tuning_max_new_index_count" {
  description = "Max new indexes recommended per DB in one session (1–25). Default: 10."
  type        = number
  default     = 10
}

variable "index_tuning_max_indexes_per_table" {
  description = "Max recommended indexes per table (1–25). Default: 10."
  type        = number
  default     = 10
}

variable "index_tuning_max_new_indexes_per_db" {
  description = "Max new indexes recommended per database (1–100). Default: 25."
  type        = number
  default     = 25
}

# ==================== locals.tf ====================
locals {
  postgresql_extensions_csv      = join(",", [for e in distinct(var.postgresql_extensions) : lower(trim(e))])
  intelligent_tuning_targets_csv = join(",", [for t in distinct(var.intelligent_tuning_targets) : trim(t)])
}

# ==================== resources.tf ====================

# --- Allow-list extensions at SERVER level (portal: Intelligent Performance toggle) ---
resource "azurerm_postgresql_flexible_server_configuration" "azure_extensions" {
  count     = var.enable_pg_perf_features && length(var.postgresql_extensions) > 0 ? 1 : 0
  name      = "azure.extensions"
  server_id = azurerm_postgresql_flexible_server.db.id
  value     = local.postgresql_extensions_csv
}

# --- Performance Insights: pg_stat_statements & capture friendliness ---
resource "azurerm_postgresql_flexible_server_configuration" "pg_stat_statements_track" {
  count     = var.enable_pg_perf_features ? 1 : 0
  name      = "pg_stat_statements.track"
  server_id = azurerm_postgresql_flexible_server.db.id
  value     = "all"
}

resource "azurerm_postgresql_flexible_server_configuration" "pg_stat_statements_max" {
  count     = var.enable_pg_perf_features ? 1 : 0
  name      = "pg_stat_statements.max"
  server_id = azurerm_postgresql_flexible_server.db.id
  value     = "10000"
}

resource "azurerm_postgresql_flexible_server_configuration" "track_activity_query_size" {
  count     = var.enable_pg_perf_features ? 1 : 0
  name      = "track_activity_query_size"
  server_id = azurerm_postgresql_flexible_server.db.id
  value     = "16384"
}

resource "azurerm_postgresql_flexible_server_configuration" "pg_stat_statements_track_planning" {
  count     = var.enable_pg_perf_features ? 1 : 0
  name      = "pg_stat_statements.track_planning"
  server_id = azurerm_postgresql_flexible_server.db.id
  value     = "on"
}

# --- Intelligent Tuning master switches ---
resource "azurerm_postgresql_flexible_server_configuration" "intelligent_tuning" {
  count     = var.enable_intelligent_tuning ? 1 : 0
  name      = "intelligent_tuning"
  server_id = azurerm_postgresql_flexible_server.db.id
  value     = "on"
}

resource "azurerm_postgresql_flexible_server_configuration" "intelligent_tuning_metric_targets" {
  count     = var.enable_intelligent_tuning ? 1 : 0
  name      = "intelligent_tuning.metric_targets"
  server_id = azurerm_postgresql_flexible_server.db.id
  value     = local.intelligent_tuning_targets_csv
  depends_on = [azurerm_postgresql_flexible_server_configuration.intelligent_tuning]
}

# --- Index tuning knobs ---
resource "azurerm_postgresql_flexible_server_configuration" "index_tuning_mode" {
  count     = var.enable_intelligent_tuning ? 1 : 0
  name      = "index_tuning.mode"   # REPORT | ENFORCE
  server_id = azurerm_postgresql_flexible_server.db.id
  value     = var.index_tuning_mode
}

resource "azurerm_postgresql_flexible_server_configuration" "index_tuning_analysis_interval" {
  count     = var.enable_intelligent_tuning ? 1 : 0
  name      = "index_tuning.analysis_interval"
  server_id = azurerm_postgresql_flexible_server.db.id
  value     = tostring(var.index_tuning_analysis_interval)
}

resource "azurerm_postgresql_flexible_server_configuration" "index_tuning_max_columns_per_index" {
  count     = var.enable_intelligent_tuning ? 1 : 0
  name      = "index_tuning.max_columns_per_index"
  server_id = azurerm_postgresql_flexible_server.db.id
  value     = tostring(var.index_tuning_max_columns_per_index)
}

resource "azurerm_postgresql_flexible_server_configuration" "index_tuning_max_new_index_count" {
  count     = var.enable_intelligent_tuning ? 1 : 0
  name      = "index_tuning.max_new_index_count"
  server_id = azurerm_postgresql_flexible_server.db.id
  value     = tostring(var.index_tuning_max_new_index_count)
}

resource "azurerm_postgresql_flexible_server_configuration" "index_tuning_max_indexes_per_table" {
  count     = var.enable_intelligent_tuning ? 1 : 0
  name      = "index_tuning.max_indexes_per_table"
  server_id = azurerm_postgresql_flexible_server.db.id
  value     = tostring(var.index_tuning_max_indexes_per_table)
}

resource "azurerm_postgresql_flexible_server_configuration" "index_tuning_max_new_indexes_per_db" {
  count     = var.enable_intelligent_tuning ? 1 : 0
  name      = "index_tuning.max_new_indexes_per_database"
  server_id = azurerm_postgresql_flexible_server.db.id
  value     = tostring(var.index_tuning_max_new_indexes_per_db)
}

# ==================== example tfvars ====================
# ---- dev/test/stg ----
# enable_pg_perf_features    = true
# enable_intelligent_tuning  = true
# postgresql_extensions      = ["pg_stat_statements","pg_qualstats","auto_explain","hypopg","pgcrypto"]
# intelligent_tuning_targets = ["tuning-autovacuum"] # or ["ALL"]
# index_tuning_mode                 = "REPORT"
# index_tuning_analysis_interval    = 720
# index_tuning_max_columns_per_index= 10
# index_tuning_max_new_index_count  = 10
# index_tuning_max_indexes_per_table= 10
# index_tuning_max_new_indexes_per_db= 25
#
# ---- prod ----
# enable_pg_perf_features   = false
# enable_intelligent_tuning = false
