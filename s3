modules/s3/variables.tf
variable "bucket_name" {
  type        = string
  description = "Name of the S3 bucket to create."
}

variable "bucket_policy_json" {
  type        = string
  description = "Bucket policy JSON to attach to this bucket."
}

variable "replica_bucket_arn" {
  type        = string
  description = "Destination bucket ARN for CRR (leave empty to disable replication)."
  default     = ""
}

variable "replication_rule_id" {
  type        = string
  description = "ID for the replication rule (if enabled)."
  default     = "crr"
}

modules/s3/main.tf
resource "aws_s3_bucket" "this" {
  bucket = var.bucket_name
}

resource "aws_s3_bucket_versioning" "this" {
  bucket = aws_s3_bucket.this.id
  versioning_configuration { status = "Enabled" }
}

resource "aws_s3_bucket_policy" "this" {
  bucket = aws_s3_bucket.this.id
  policy = var.bucket_policy_json
}

# Replication IAM role (only if replica provided)
resource "aws_iam_role" "replication" {
  count = var.replica_bucket_arn == "" ? 0 : 1
  name  = "${var.bucket_name}-replication-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect    = "Allow",
      Principal = { Service = "s3.amazonaws.com" },
      Action    = "sts:AssumeRole"
    }]
  })
}

resource "aws_iam_role_policy" "replication" {
  count = var.replica_bucket_arn == "" ? 0 : 1
  role  = aws_iam_role.replication[0].id
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      { Effect = "Allow", Action = ["s3:GetReplicationConfiguration","s3:ListBucket"], Resource = aws_s3_bucket.this.arn },
      { Effect = "Allow", Action = ["s3:GetObjectVersion","s3:GetObjectVersionAcl","s3:GetObjectVersionTagging"], Resource = "${aws_s3_bucket.this.arn}/*" },
      { Effect = "Allow", Action = ["s3:ReplicateObject","s3:ReplicateDelete","s3:ReplicateTags"], Resource = "${var.replica_bucket_arn}/*" }
    ]
  })
}

resource "aws_s3_bucket_replication_configuration" "this" {
  count      = var.replica_bucket_arn == "" ? 0 : 1
  bucket     = aws_s3_bucket.this.id
  role       = aws_iam_role.replication[0].arn
  depends_on = [aws_s3_bucket_versioning.this]

  rule {
    id     = var.replication_rule_id
    status = "Enabled"

    # Optional: add loop-prevention filter here (prefix/tag) if you want
    # filter { tag { key = "origin" value = var.bucket_name } }

    destination {
      bucket        = var.replica_bucket_arn
      storage_class = "STANDARD"
    }
  }
}

modules/s3/outputs.tf
output "bucket_id" {
  description = "Bucket ID (name)."
  value       = aws_s3_bucket.this.id
}

output "bucket_arn" {
  description = "Bucket ARN."
  value       = aws_s3_bucket.this.arn
}

caller/providers.tf
provider "aws" {
  alias  = "west"
  region = "us-west-2"
}

provider "aws" {
  alias  = "east"
  region = "us-east-1"
}

caller/policy.json.tpl
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "DenyInsecureTransport",
      "Effect": "Deny",
      "Principal": "*",
      "Action": "s3:*",
      "Resource": [
        "arn:aws:s3:::${bucket_name}",
        "arn:aws:s3:::${bucket_name}/*"
      ],
      "Condition": { "Bool": { "aws:SecureTransport": "false" } }
    }
  ]
}

caller/main.tf
# Create WEST
module "s3_west" {
  source    = "./modules/s3"
  providers = { aws = aws.west }

  bucket_name = "my-west-bucket"

  # compute ARN in template from the name, no circular refs
  bucket_policy_json = templatefile("${path.module}/policy.json.tpl", {
    bucket_name = "my-west-bucket"
  })

  # wire replication to EAST using EAST module output (defined below)
  replica_bucket_arn = "" # temporarily empty; we’ll pass real ARN in the EAST call below
}

# Create EAST
module "s3_east" {
  source    = "./modules/s3"
  providers = { aws = aws.east }

  bucket_name = "my-east-bucket"

  bucket_policy_json = templatefile("${path.module}/policy.json.tpl", {
    bucket_name = "my-east-bucket"
  })

  # replicate to WEST using WEST’s output — NO HARDCODE:
  replica_bucket_arn = module.s3_west.bucket_arn
}

# Now add replication WEST->EAST by reconfiguring WEST with the EAST ARN
# If you prefer one-pass only, swap order: create EAST first, then WEST uses module.s3_east.bucket_arn.
module "s3_west_replication" {
  source    = "./modules/s3"
  providers = { aws = aws.west }

  bucket_name = module.s3_west.bucket_id

  bucket_policy_json = templatefile("${path.module}/policy.json.tpl", {
    bucket_name = module.s3_west.bucket_id
  })

  replica_bucket_arn = module.s3_east.bucket_arn
}
