Module: modules/s3
variables.tf
variable "bucket_name" {
  type        = string
  description = "Name of the S3 bucket to create."
}

variable "bucket_policy_json" {
  type        = string
  description = "Bucket policy JSON to attach."
}

variable "replica_bucket_arn" {
  type        = string
  description = "Destination bucket ARN for replication (optional)."
  default     = null
}

variable "replication_rule_id" {
  type        = string
  description = "Unique ID for the replication rule if enabled."
  default     = "s3-replication"
}

main.tf
# One bucket only
resource "aws_s3_bucket" "this" {
  bucket = var.bucket_name
}

# Enable versioning
resource "aws_s3_bucket_versioning" "this" {
  bucket = aws_s3_bucket.this.id
  versioning_configuration { status = "Enabled" }
}

# Attach bucket policy
resource "aws_s3_bucket_policy" "this" {
  bucket = aws_s3_bucket.this.id
  policy = var.bucket_policy_json
}

# Optional replication config
resource "aws_iam_role" "replication" {
  count = var.replica_bucket_arn == null ? 0 : 1
  name  = "${var.bucket_name}-replication-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17",
    Statement = [{
      Effect    = "Allow",
      Principal = { Service = "s3.amazonaws.com" },
      Action    = "sts:AssumeRole"
    }]
  })
}

resource "aws_iam_role_policy" "replication" {
  count = var.replica_bucket_arn == null ? 0 : 1
  role  = aws_iam_role.replication[0].id

  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Effect   = "Allow",
        Action   = ["s3:GetReplicationConfiguration","s3:ListBucket"],
        Resource = aws_s3_bucket.this.arn
      },
      {
        Effect   = "Allow",
        Action   = ["s3:GetObjectVersion","s3:GetObjectVersionAcl","s3:GetObjectVersionTagging"],
        Resource = "${aws_s3_bucket.this.arn}/*"
      },
      {
        Effect   = "Allow",
        Action   = ["s3:ReplicateObject","s3:ReplicateDelete","s3:ReplicateTags"],
        Resource = "${var.replica_bucket_arn}/*"
      }
    ]
  })
}

resource "aws_s3_bucket_replication_configuration" "this" {
  count      = var.replica_bucket_arn == null ? 0 : 1
  bucket     = aws_s3_bucket.this.id
  role       = aws_iam_role.replication[0].arn
  depends_on = [aws_s3_bucket_versioning.this]

  rule {
    id     = var.replication_rule_id
    status = "Enabled"

    destination {
      bucket        = var.replica_bucket_arn
      storage_class = "STANDARD"
    }
  }
}

outputs.tf
output "bucket_arn" {
  value       = aws_s3_bucket.this.arn
  description = "ARN of this S3 bucket."
}

output "bucket_id" {
  value       = aws_s3_bucket.this.id
  description = "ID of this S3 bucket."
}

ðŸ”¹ Caller (root module)

Define your providers:

provider "aws" {
  alias  = "west"
  region = "us-west-2"
}

provider "aws" {
  alias  = "east"
  region = "us-east-1"
}


Call module twice:

# WEST bucket
module "s3_west" {
  source            = "./modules/s3"
  providers         = { aws = aws.west }
  bucket_name       = "my-west-bucket"

  bucket_policy_json = templatefile("${path.module}/policy.json.tpl", {
    bucket_arn = "arn:aws:s3:::my-west-bucket"
  })

  replica_bucket_arn = "arn:aws:s3:::my-east-bucket" # enable replication to east
}

# EAST bucket
module "s3_east" {
  source            = "./modules/s3"
  providers         = { aws = aws.east }
  bucket_name       = "my-east-bucket"

  bucket_policy_json = templatefile("${path.module}/policy.json.tpl", {
    bucket_arn = "arn:aws:s3:::my-east-bucket"
  })

  replica_bucket_arn = "arn:aws:s3:::my-west-bucket" # enable replication to west
}

