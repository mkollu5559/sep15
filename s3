variable "bucket_name" {
  description = "S3 bucket name"
  type        = string
}

variable "force_destroy" {
  description = "Destroy bucket even if it contains objects"
  type        = bool
  default     = false
}

variable "tags" {
  description = "Tags to apply to all resources"
  type        = map(string)
  default     = {}
}

variable "kms_key_arn" {
  description = "KMS key ARN for default server-side encryption (null = SSE-S3)"
  type        = string
  default     = null
}

variable "bucket_policy_json" {
  description = "Raw JSON for the S3 bucket policy. If null, no policy is attached by this module."
  type        = string
  default     = null
}

variable "enable_replication" {
  description = "Enable cross-region replication from this bucket"
  type        = bool
  default     = false
}

variable "destination_bucket_arn" {
  description = "Destination bucket ARN for replication (required when enable_replication = true)"
  type        = string
  default     = null
}

variable "replication_prefix" {
  description = "Optional object prefix to replicate (empty = all objects)"
  type        = string
  default     = ""
}

variable "replication_storage_class" {
  description = "Destination storage class (e.g., STANDARD_IA). Empty = use source class."
  type        = string
  default     = ""
}
hcl
Copy code
# modules/s3/main.tf
resource "aws_s3_bucket" "this" {
  bucket        = var.bucket_name
  force_destroy = var.force_destroy
  tags          = var.tags
}

resource "aws_s3_bucket_versioning" "this" {
  bucket = aws_s3_bucket.this.id
  versioning_configuration { status = "Enabled" }
}

resource "aws_s3_bucket_public_access_block" "this" {
  bucket                  = aws_s3_bucket.this.id
  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

resource "aws_s3_bucket_server_side_encryption_configuration" "this" {
  bucket = aws_s3_bucket.this.id
  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm     = var.kms_key_arn == null ? "AES256" : "aws:kms"
      kms_master_key_id = var.kms_key_arn
    }
  }
}

# Attach EXACT policy JSON passed by caller (if provided)
resource "aws_s3_bucket_policy" "this" {
  count  = var.bucket_policy_json == null ? 0 : 1
  bucket = aws_s3_bucket.this.id
  policy = var.bucket_policy_json
}

# ----- Optional: Replication (one destination) -----
data "aws_iam_policy_document" "replication_assume" {
  statement {
    effect = "Allow"
    principals { type = "Service" identifiers = ["s3.amazonaws.com"] }
    actions = ["sts:AssumeRole"]
  }
}

data "aws_iam_policy_document" "replication_policy" {
  statement {
    sid     = "SourceBucketAccess"
    effect  = "Allow"
    actions = ["s3:GetReplicationConfiguration","s3:ListBucket"]
    resources = [aws_s3_bucket.this.arn]
  }

  statement {
    sid     = "SourceObjectAccess"
    effect  = "Allow"
    actions = [
      "s3:GetObjectVersion","s3:GetObjectVersionAcl","s3:GetObjectVersionForReplication",
      "s3:GetObjectVersionTagging","s3:ListBucketMultipartUploads","s3:ListBucketVersions"
    ]
    resources = ["${aws_s3_bucket.this.arn}/*"]
  }

  statement {
    sid     = "ReplicateToDestination"
    effect  = "Allow"
    actions = ["s3:ReplicateObject","s3:ReplicateDelete","s3:ReplicateTags","s3:ObjectOwnerOverrideToBucketOwner"]
    resources = var.destination_bucket_arn == null ? [] : ["${var.destination_bucket_arn}/*"]
  }
}

resource "aws_iam_role" "replication" {
  count              = var.enable_replication ? 1 : 0
  name               = "${var.bucket_name}-replication-role"
  assume_role_policy = data.aws_iam_policy_document.replication_assume.json
  tags               = var.tags
}

resource "aws_iam_role_policy" "replication" {
  count  = var.enable_replication ? 1 : 0
  name   = "${var.bucket_name}-replication-policy"
  role   = aws_iam_role.replication[0].id
  policy = data.aws_iam_policy_document.replication_policy.json
}

resource "aws_s3_bucket_replication_configuration" "this" {
  count  = var.enable_replication ? 1 : 0
  bucket = aws_s3_bucket.this.id
  role   = aws_iam_role.replication[0].arn

  rule {
    id     = "crr"
    status = "Enabled"

    filter { prefix = var.replication_prefix }

    destination {
      bucket        = var.destination_bucket_arn
      storage_class = var.replication_storage_class == "" ? null : var.replication_storage_class
    }
  }

  depends_on = [aws_s3_bucket_versioning.this]
}
hcl
Copy code
# modules/s3/outputs.tf
output "bucket_id"  { description = "Bucket name"; value = aws_s3_bucket.this.id }
output "bucket_arn" { description = "Bucket ARN";  value = aws_s3_bucket.this.arn }
hcl
Copy code
# root/main.tf  (example caller: create two buckets; west replicates to east)
module "s3_east" {
  source       = "./modules/s3"
  bucket_name  = "my-customer-east"
  kms_key_arn  = "arn:aws:kms:us-east-1:111122223333:key/xxxx"
  tags         = { Environment = "dev", Region = "east" }

  # Example: pass JSON policy (file, templatefile, or heredoc)
  bucket_policy_json = file("${path.module}/policy-east.json")

  enable_replication        = false
  destination_bucket_arn    = null
  replication_prefix        = ""
  replication_storage_class = ""
}

module "s3_west" {
  source       = "./modules/s3"
  bucket_name  = "my-customer-west"
  kms_key_arn  = "arn:aws:kms:us-west-2:111122223333:key/yyyy"
  tags         = { Environment = "dev", Region = "west" }

  bucket_policy_json = file("${path.module}/policy-west.json")

  enable_replication        = true
  destination_bucket_arn    = module.s3_east.bucket_arn
  replication_prefix        = ""
  replication_storage_class = "STANDARD"
}
json
Copy code
// root/policy-east.json (example JSON the caller passes)
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Sid": "DenyInsecure",
      "Effect": "Deny",
      "Principal": "*",
      "Action": "s3:*",
      "Resource": ["arn:aws:s3:::my-customer-east", "arn:aws:s3:::my-customer-east/*"],
      "Condition": { "Bool": { "aws:SecureTransport": "false" } }
    }
  ]
}










ChatGPT can make mistakes. Check important info.
