###############################################################################
# S3 Cross-Region Replication (west -> east) with guardrails â€” single file
###############################################################################

# -------- Vars --------
variable "src_bucket_name" {
  type        = string
  description = "Name of the source S3 bucket in the west region (replication will copy from here)."
}

variable "dst_bucket_name" {
  type        = string
  description = "Name of the destination S3 bucket in the east region (replication will copy to here)."
}

variable "src_region" {
  type        = string
  default     = "us-west-2"
  description = "AWS region for the source bucket (default: us-west-2)."
}

variable "dst_region" {
  type        = string
  default     = "us-east-1"
  description = "AWS region for the destination bucket (default: us-east-1)."
}


# -------- Providers (west = source, east = destination) --------
provider "aws" {
  region = var.src_region
}

provider "aws" {
  alias  = "east"
  region = var.dst_region
}

# -------- Destination bucket (EAST) --------
resource "aws_s3_bucket" "dst" {
  provider = aws.east
  bucket   = var.dst_bucket_name
  force_destroy = false
}

resource "aws_s3_bucket_versioning" "dst" {
  provider = aws.east
  bucket   = aws_s3_bucket.dst.id
  versioning_configuration { status = "Enabled" }
}

resource "aws_s3_bucket_public_access_block" "dst" {
  provider                = aws.east
  bucket                  = aws_s3_bucket.dst.id
  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

# Guardrails (TLS only + require SSE on PUT)
data "aws_iam_policy_document" "dst_bucket_policy" {
  statement {
    sid     = "DenyInsecureTransport"
    effect  = "Deny"
    actions = ["s3:*"]
    principals { type = "*" identifiers = ["*"] }
    resources = [
      aws_s3_bucket.dst.arn,
      "${aws_s3_bucket.dst.arn}/*"
    ]
    condition {
      test     = "Bool"
      variable = "aws:SecureTransport"
      values   = ["false"]
    }
  }

  statement {
    sid     = "DenyUnEncryptedObjectUploads"
    effect  = "Deny"
    actions = ["s3:PutObject"]
    principals { type = "*" identifiers = ["*"] }
    resources = ["${aws_s3_bucket.dst.arn}/*"]
    condition {
      test     = "StringNotEquals"
      variable = "s3:x-amz-server-side-encryption"
      values   = ["AES256"]   # keep simple; change to aws:kms + kms key if needed
    }
  }

  # Allow the replication role from source account to write objects and ownership override
  statement {
    sid    = "AllowReplicationFromSource"
    effect = "Allow"
    actions = [
      "s3:ReplicateObject",
      "s3:ReplicateDelete",
      "s3:ObjectOwnerOverrideToBucketOwner",
      "s3:PutObject"
    ]
    principals {
      type        = "AWS"
      identifiers = [aws_iam_role.replication.arn]
    }
    resources = ["${aws_s3_bucket.dst.arn}/*"]
  }
}

resource "aws_s3_bucket_policy" "dst" {
  provider = aws.east
  bucket   = aws_s3_bucket.dst.id
  policy   = data.aws_iam_policy_document.dst_bucket_policy.json
}

# -------- Source bucket (WEST) --------
resource "aws_s3_bucket" "src" {
  bucket = var.src_bucket_name
  force_destroy = false
}

resource "aws_s3_bucket_versioning" "src" {
  bucket = aws_s3_bucket.src.id
  versioning_configuration { status = "Enabled" }
}

resource "aws_s3_bucket_public_access_block" "src" {
  bucket                  = aws_s3_bucket.src.id
  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

# Guardrails on source (TLS + SSE on PUT)
data "aws_iam_policy_document" "src_bucket_policy" {
  statement {
    sid     = "DenyInsecureTransport"
    effect  = "Deny"
    actions = ["s3:*"]
    principals { type = "*" identifiers = ["*"] }
    resources = [
      aws_s3_bucket.src.arn,
      "${aws_s3_bucket.src.arn}/*"
    ]
    condition {
      test     = "Bool"
      variable = "aws:SecureTransport"
      values   = ["false"]
    }
  }

  statement {
    sid     = "DenyUnEncryptedObjectUploads"
    effect  = "Deny"
    actions = ["s3:PutObject"]
    principals { type = "*" identifiers = ["*"] }
    resources = ["${aws_s3_bucket.src.arn}/*"]
    condition {
      test     = "StringNotEquals"
      variable = "s3:x-amz-server-side-encryption"
      values   = ["AES256"]
    }
  }
}

resource "aws_s3_bucket_policy" "src" {
  bucket = aws_s3_bucket.src.id
  policy = data.aws_iam_policy_document.src_bucket_policy.json
}

# -------- Replication IAM (in source region/account) --------
data "aws_iam_policy_document" "replication_trust" {
  statement {
    effect = "Allow"
    principals { type = "Service" identifiers = ["s3.amazonaws.com"] }
    actions = ["sts:AssumeRole"]
  }
}

resource "aws_iam_role" "replication" {
  name               = "s3-replication-role-${var.src_bucket_name}"
  assume_role_policy = data.aws_iam_policy_document.replication_trust.json
}

# Permissions required by S3 to replicate objects and read configuration on source
data "aws_iam_policy_document" "replication_permissions" {
  statement {
    sid    = "SourceReads"
    effect = "Allow"
    actions = [
      "s3:GetReplicationConfiguration",
      "s3:ListBucket"
    ]
    resources = [aws_s3_bucket.src.arn]
  }

  statement {
    sid    = "SourceObjectReads"
    effect = "Allow"
    actions = [
      "s3:GetObjectVersion",
      "s3:GetObjectVersionAcl",
      "s3:GetObjectVersionForReplication",
      "s3:GetObjectLegalHold",
      "s3:GetObjectVersionTagging",
      "s3:GetObjectRetention"
    ]
    resources = ["${aws_s3_bucket.src.arn}/*"]
  }

  statement {
    sid    = "DestinationWrites"
    effect = "Allow"
    actions = [
      "s3:ReplicateObject",
      "s3:ReplicateDelete",
      "s3:ReplicateTags",
      "s3:ObjectOwnerOverrideToBucketOwner",
      "s3:PutObject"
    ]
    resources = ["${aws_s3_bucket.dst.arn}/*"]
  }
}

resource "aws_iam_policy" "replication" {
  name   = "s3-replication-policy-${var.src_bucket_name}"
  policy = data.aws_iam_policy_document.replication_permissions.json
}

resource "aws_iam_role_policy_attachment" "replication" {
  role       = aws_iam_role.replication.name
  policy_arn = aws_iam_policy.replication.arn
}

# -------- Replication configuration (on source bucket) --------
resource "aws_s3_bucket_replication_configuration" "src" {
  depends_on = [
    aws_s3_bucket_versioning.src,
    aws_s3_bucket_versioning.dst,
    aws_iam_role_policy_attachment.replication,
    aws_s3_bucket_policy.dst
  ]

  bucket = aws_s3_bucket.src.id
  role   = aws_iam_role.replication.arn

  rule {
    id     = "replicate-all"
    status = "Enabled"

    destination {
      bucket        = aws_s3_bucket.dst.arn
      storage_class = "STANDARD"
      account       = null
      access_control_translation { owner = "Destination" } # set bucket owner on dst
      encryption_configuration { replica_kms_key_id = null } # set to KMS ARN if using CMK
    }

    delete_marker_replication { status = "Enabled" }
    filter { prefix = "" }
  }
}
