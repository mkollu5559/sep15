# create-tf-backend.tf
# Creates an S3 bucket for Terraform state (versioned, encrypted, private)
# and a DynamoDB table for state locking. Pure Terraform.

terraform {
  required_version = ">= 1.5.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = ">= 5.0"
    }
  }
}

# ------------------------ Provider ------------------------
provider "aws" {
  region = var.region
}

# ------------------------ Inputs --------------------------
variable "region" {
  type        = string
  description = "AWS region to create backend resources in"
  default     = "us-east-1"
}

variable "state_bucket_name" {
  type        = string
  description = "Name of the S3 bucket to store Terraform state"
}

variable "dynamodb_table_name" {
  type        = string
  description = "Name of the DynamoDB table for Terraform locking"
  default     = "tf-state-locks"
}

variable "kms_key_arn" {
  type        = string
  description = "Optional CMK for S3 default encryption; if empty, use AES256"
  default     = ""
}

variable "force_destroy" {
  type        = bool
  description = "Allow bucket destroy even if non-empty (use with caution)"
  default     = false
}

variable "tags" {
  type        = map(string)
  description = "Common tags"
  default     = {}
}

# ------------------------ S3 (state) -----------------------
resource "aws_s3_bucket" "state" {
  bucket        = var.state_bucket_name
  force_destroy = var.force_destroy
  tags          = var.tags
}

resource "aws_s3_bucket_ownership_controls" "owner" {
  bucket = aws_s3_bucket.state.id
  rule {
    object_ownership = "BucketOwnerEnforced"
  }
}

resource "aws_s3_bucket_public_access_block" "pab" {
  bucket                  = aws_s3_bucket.state.id
  block_public_acls       = true
  block_public_policy     = true
  ignore_public_acls      = true
  restrict_public_buckets = true
}

resource "aws_s3_bucket_versioning" "versioning" {
  bucket = aws_s3_bucket.state.id
  versioning_configuration {
    status = "Enabled"
  }
}

resource "aws_s3_bucket_server_side_encryption_configuration" "sse" {
  bucket = aws_s3_bucket.state.id
  rule {
    apply_server_side_encryption_by_default {
      sse_algorithm     = var.kms_key_arn != "" ? "aws:kms" : "AES256"
      kms_master_key_id = var.kms_key_arn != "" ? var.kms_key_arn : null
    }
    bucket_key_enabled = var.kms_key_arn != ""
  }
}

# Enforce TLS and (optionally) deny unencrypted uploads
data "aws_iam_policy_document" "bucket_policy" {
  statement {
    sid     = "DenyInsecureTransport"
    effect  = "Deny"
    actions = ["s3:*"]
    principals {
      type        = "*"
      identifiers = ["*"]
    }
    resources = [
      aws_s3_bucket.state.arn,
      "${aws_s3_bucket.state.arn}/*"
    ]
    condition {
      test     = "Bool"
      variable = "aws:SecureTransport"
      values   = ["false"]
    }
  }
}

resource "aws_s3_bucket_policy" "policy" {
  bucket = aws_s3_bucket.state.id
  policy = data.aws_iam_policy_document.bucket_policy.json
}

# Lifecycle hygiene (optional but recommended)
resource "aws_s3_bucket_lifecycle_configuration" "lc" {
  bucket = aws_s3_bucket.state.id

  rule {
    id     = "AbortMultipartUploads"
    status = "Enabled"

    abort_incomplete_multipart_upload {
      days_after_initiation = 7
    }
  }

  rule {
    id     = "NoncurrentVersionCleanup"
    status = "Enabled"
    noncurrent_version_transition {
      noncurrent_days = 30
      storage_class   = "STANDARD_IA"
    }
    noncurrent_version_expiration {
      noncurrent_days = 365
    }
  }
}

# --------------------- DynamoDB (lock) --------------------
resource "aws_dynamodb_table" "lock" {
  name         = var.dynamodb_table_name
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "LockID"

  attribute {
    name = "LockID"
    type = "S"
  }

  point_in_time_recovery {
    enabled = true
  }

  tags = var.tags
}

# ------------------------ Outputs -------------------------
output "backend_bucket" {
  value       = aws_s3_bucket.state.bucket
  description = "S3 bucket name for Terraform state"
}

output "backend_bucket_arn" {
  value       = aws_s3_bucket.state.arn
  description = "S3 bucket ARN"
}

output "backend_dynamodb_table" {
  value       = aws_dynamodb_table.lock.name
  description = "DynamoDB table for state locking"
}

output "suggested_backend_hcl" {
  description = "Copy into backend.hcl and run: terraform init -backend-config=backend.hcl"
  value = <<EOT
bucket         = "${aws_s3_bucket.state.bucket}"
key            = "envs/prod/terraform.tfstate"
region         = "${var.region}"
dynamodb_table = "${aws_dynamodb_table.lock.name}"
encrypt        = true
EOT
}
