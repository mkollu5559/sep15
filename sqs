variable "s3_bucket_name" {
  description = "Existing S3 bucket name"
  type        = string
}

variable "lambda_arn" {
  description = "Existing Lambda function ARN"
  type        = string
}

variable "lambda_name" {
  description = "Existing Lambda function name"
  type        = string
}

resource "aws_sqs_queue" "event_queue" {
  name = "s3-eventbridge-lambda-queue"
}

# Allow EventBridge to send messages to SQS
resource "aws_sqs_queue_policy" "eventbridge_policy" {
  queue_url = aws_sqs_queue.event_queue.id
  policy = jsonencode({
    Version = "2012-10-17",
    Statement = [
      {
        Sid      = "AllowEventBridgeToSend",
        Effect   = "Allow",
        Principal = {
          Service = "events.amazonaws.com"
        },
        Action   = "sqs:SendMessage",
        Resource = aws_sqs_queue.event_queue.arn,
        Condition = {
          ArnEquals = {
            "aws:SourceArn" = aws_cloudwatch_event_rule.s3_event_rule.arn
          }
        }
      }
    ]
  })
}

# EventBridge Rule to capture S3 events
resource "aws_cloudwatch_event_rule" "s3_event_rule" {
  name        = "s3-eventbridge-rule"
  description = "Trigger when S3 object is created"
  event_pattern = jsonencode({
    "source"      : ["aws.s3"],
    "detail-type" : ["AWS API Call via CloudTrail"],
    "detail" : {
      "eventSource" : ["s3.amazonaws.com"],
      "eventName"   : ["PutObject"],
      "requestParameters" : {
        "bucketName" : [var.s3_bucket_name]
      }
    }
  })
}

# Target: EventBridge -> SQS
resource "aws_cloudwatch_event_target" "s3_to_sqs" {
  rule      = aws_cloudwatch_event_rule.s3_event_rule.name
  target_id = "SendToSQS"
  arn       = aws_sqs_queue.event_queue.arn
}

# Lambda trigger from SQS
resource "aws_lambda_event_source_mapping" "sqs_to_lambda" {
  event_source_arn = aws_sqs_queue.event_queue.arn
  function_name    = var.lambda_name
  batch_size       = 1
  enabled          = true
}
